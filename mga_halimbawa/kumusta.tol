// THIS IS A QUICK WALKTHROUGH OF AN EXAMPLE TOL PROGRAM.
// THIS IS MADE FOR PEOPLE THAT CAME FROM OTHER PROGRAMMING LANGUAGES.

// `bagay` lets you create 'objects' which
// can hold arbitrary amount of data of different types
bagay Tao {
    edad: i32,
    tuig: u32,
}

// `itupad` lets you attach methods onto the object indicated
// after the keyword
itupad Tao {
    // When `ako` keyword is not in the first parameter,
    // the method is static
    paraan bago(edad: i32, tuig: u32) Tao {
        ibalik Tao!(edad: edad, tuig: tuig)
    }

    // When `ako` keyword is encountered as the first
    // parameter, it is a member method
    paraan get_tuig(ako) u32 {
        ibalik ako.tuig
    }
}

bagay Hayop {
    edad: u8,
}

// `itupad` lets you attach methods on primitive types too
itupad i32 {
    paraan idagdag_sa(ako, iba: i32) i32 {
        ibalik ako + iba
    }

    paraan wala_lang() i32 {
        ibalik 42
    }
}

// `paraan` lets you define a function
paraan una() {
    // `ang` lets you initialize a variable.
    // In Tol, you cannot have an uninitialized variable,
    // all variables in Tol are initialized.
    //
    // By default, variables in Tol are immutable, this will encourage
    // users to have immutable variables when they can,
    // as it can increase readability of the program :).
    //
    ang tao = Tao::bago(8, 10) // Calls the `bago` static method from `Tao`
    ang edad = tao.edad // Field access
    ang tuig = tao.get_tuig() // Method call

    // One more thing is that variables have their types inferred
    // when you initialize them. Remember that Tol is a statically-typed
    // programming language, so even though you did NOT provide the types,
    // what the compiler inferred as the type of that variable will be its
    // type and it cannot be assigned with another type.
    ang numero = 67
    // numero = 41 // ERROR
    ang maiba numero_maiba = 67
    numero_maiba = 41 // OK

    ang dagdag = 5
    ang resulta = dagdag.idagdag_sa(1)
    ang res = i32::wala_lang() - 42 // Will result in 0

    // A 2D static array. These kind of arrays are unsafe to use as
    // it does NOT know its own size.
    // Use &[]T type instead (NOTE: Not yet implemented).
    ang array = [[1, 2, 3]]

    // Can be read as "from 0 to 12 (inclusive), assign each to `i`"
    // Its the for-loop syntax for this language
    sa 0..=12 => i {
        i;
    }

    // A byte string literal. Also known as []u8, these kind
    // of string literal are also unsafe as it does not know its own type.
    // Use &[]u8 type or remove `b` instead (NOTE: Not yet implemented).
    ang hello = b"Hello world"

    @print(hello)
    @println(b"Kumusta mundo")
    @alis(0)
}
